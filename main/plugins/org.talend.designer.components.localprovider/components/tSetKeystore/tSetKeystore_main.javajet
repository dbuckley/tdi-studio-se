<%@ jet 
imports="
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.INode
	org.talend.designer.codegen.config.CodeGeneratorArgument
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	// component id
	String cid = node.getUniqueName();
	
	boolean set_truststore_keystore = ("true").equals(ElementParameterParser.getValue(node,"__SET_TRUSTSTORE_KEYSTORE__"));
	
	String trustStoreType = ElementParameterParser.getValue(node,"__TRUSTSTORE_TYPE__");
	String trustStorePath = ElementParameterParser.getValue(node,"__SSL_TRUSTSERVER_TRUSTSTORE__");
	String trustStorePwd = ElementParameterParser.getValue(node,"__SSL_TRUSTSERVER_PASSWORD__");
	boolean needClientAuth = set_truststore_keystore || "true".equals(ElementParameterParser.getValue(node,"__NEED_CLIENT_AUTH__"));
	String keyStoreType = ElementParameterParser.getValue(node,"__KEYSTORE_TYPE__");
	String keyStorePath = ElementParameterParser.getValue(node,"__SSL_KEYSTORE__");
	String keyStorePwd = ElementParameterParser.getValue(node,"__SSL_KEYSTORE_PASSWORD__");
	boolean verifyName = ("true").equals(ElementParameterParser.getValue(node,"__VERIFY_NAME__"));
	
	boolean use_sslcontext = ("true").equals(ElementParameterParser.getValue(node,"__USE_SSLCONTEXT__"));
	
	boolean set_truststore = set_truststore_keystore || ("true").equals(ElementParameterParser.getValue(node,"__SET_TRUSTSTORE__"));
//this works for all ssl client like apache httpclient?
if(!verifyName){
%>
	javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(
		new javax.net.ssl.HostnameVerifier(){
			public boolean verify(String hostName,javax.net.ssl.SSLSession session) {
				return true;
			}

			// Note we need this method as well or else it won't work the with the
			// deprecated HostnameVerifier interface
			public boolean verify(final String host, final String certHostname) {
				return true;
			}
		}
	);
<%
}
  
if(use_sslcontext) {
%>
	<%@ include file="./sslcontext.javajet"%>
<%
	return stringBuffer.toString();
}
%>
	
<%
String passwordFieldName = "__SSL_TRUSTSERVER_PASSWORD__";
if(set_truststore){
%>
	System.setProperty("javax.net.ssl.trustStore", <%=trustStorePath %>);
	System.setProperty("javax.net.ssl.trustStoreType", "<%=trustStoreType %>");
	
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>	
	
	System.setProperty("javax.net.ssl.trustStorePassword", decryptedPassword_<%=cid%>);
<%}%>
	
<%if(needClientAuth){%>
	System.setProperty("javax.net.ssl.keyStore", <%=keyStorePath %>);
	System.setProperty("javax.net.ssl.keyStoreType", "<%=keyStoreType%>");
	
	<%
	passwordFieldName = "__SSL_KEYSTORE_PASSWORD__";
	%>
	
	<%if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {%> 
	String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
	<%} else {%>
	String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
	<%}%>
	
	System.setProperty("javax.net.ssl.keyStorePassword",decryptedPwd_<%=cid%>);
<%}else{%>
	System.clearProperty("javax.net.ssl.keyStore");
	System.clearProperty("javax.net.ssl.keyStoreType");
	System.clearProperty("javax.net.ssl.keyStorePassword");
<%}%>
			
